openapi: 3.0.3
info:
  title: Client Prospection and Sales Redirection API - OpenAPI 3.0
  description: |-
    This API is a challenge for Cielo's Bootcamp, being this API the second developed during the Bootcamp.
    Mainly having two modules: Pre-registration and Attendment
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  contact:
    email: alissonhbv@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080/api/v3
tags:
  - name: user
    description: Pre-registration for new prospected clients
  - name: sales
    description: Everything about client's redirection to sales department
paths:
  /user/create:
    post:
      tags:
        - user
      summary: Creates user
      description: Creates users with constraint for its document
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User already has an account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
  /sales/enqueue:
    post:
      tags:
        - sales
      summary: Place a request for a sales representant
      description: Place a new order to enqueue into a representant attending queue
      operationId: enqueue
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepresentativeRequest'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnqueueResponse'
        '405':
          description: Invalid input
  /sales/queue/{customerId}:
    get:
      tags:
        - sales
      summary: Find customer information on his queues
      description: For valid response try integer UUID's
      operationId: checkCustomerQueue
      parameters:
        - name: customerId
          in: path
          description: ID of customer that needs to be checked
          required: true
          schema:
            type: object
            format: string
            example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnqueueResponse'
        '404':
          description: Customer not found on sales queues
components:
  schemas:
    RepresentativeRequest:
      type: object
      properties:
        id:
          type: object
          format: string
          example: 550e8400-e29b-41d4-a716-446655440000
        customerId:
          type: string
          example: 550e8400-e29b-41d4-a716-446655440000
          items:
            $ref: '#/components/schemas/Customer'
    EnqueueResponse:
      type: object
      properties:
        queuePosition:
          type: integer
          format: int64
          example: 13
        estimatedWaitingTime:
          type: object
          example: 2023-09-26T14:00:00.000Z
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    MerchantCategory:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Clothes
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: object
          format: string
          example: 550e8400-e29b-41d4-a716-446655440000
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
    ErrorResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
          example: 500
        code:
          type: integer
          format: int64
        message:
          type: string
  securitySchemes:
    customer_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://keycloak/oauth/authorize
          scopes:
            write:customer: modify customers in your account
            read:customer: read your customer's info
    api_key:
      type: apiKey
      name: api_key
      in: header